# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    locale: fr
    google_calendar_redirect_uri: '%env(GOOGLE_REDIRECT_URI)%'
    google_calendar_client_id: '%env(GOOGLE_CLIENT_ID)%'
    google_calendar_client_secret: '%env(GOOGLE_CLIENT_SECRET)%'
    google_email: '%env(GOOGLE_EMAIL)%'
    maintenance_mode: '%env(MAINTENANCE_MODE)%'
    billetreduc_login: '%env(BILLETREDUC_LOGIN)%'
    billetreduc_password: '%env(BILLETREDUC_PASSWORD)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    App\Crop\CropResizer:
        tags: [ 'sonata.media.resizer' ]
        arguments:
            $adapter: '@sonata.media.adapter.image.default'
            $metadata: '@sonata.media.metadata.proxy'

    App\Admin\ArtistAdmin:
        arguments:
            $pool: '@sonata.media.pool'

    App\Service\EmailService:
        arguments:
            $pool: '@sonata.media.pool'

    App\Admin\Extension\MediaBrowserAdminExtension:
        tags: 
            - { name: sonata.admin.extension, attributes: { target: sonata.media.admin.media } }

    admin.artist:
        class: App\Admin\ArtistAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Artist, manager_type: orm, label: 'Les artistes' }

    admin.artistItem:
        class: App\Admin\ArtistItemAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\ArtistItem, manager_type: orm, label: 'Objet artiste' }

    admin.blogPost:
        class: App\Admin\BlogPostAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\BlogPost, manager_type: orm, label: 'Les posts' }

    admin.blogPostItem:
        class: App\Admin\BlogPostItemAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\BlogPostItem, manager_type: orm, label: 'Les objets posts' }


    admin.job:
        class: App\Admin\JobAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Job, manager_type: orm, label: 'Les métiers' }

    admin.jobItem:
        class: App\Admin\JobItemAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\JobItem, manager_type: orm, label: 'Les objets métiers' }

    admin.link:
        class: App\Admin\LinkAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Link, manager_type: orm, label: 'Lien' }

    admin.linkItem:
        class: App\Admin\LinkItemAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\LinkItem, manager_type: orm, label: 'Objet lien' }

    admin.paper:
        class: App\Admin\PaperAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Paper, manager_type: orm, label: 'Revue de presse' }

    admin.paperItem:
        class: App\Admin\PaperItemAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\PaperItem, manager_type: orm, label: 'Objet revue de presse' }

    admin.period:
        class: App\Admin\PeriodAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Period, manager_type: orm, label: 'Périodes' }

    admin.periodItem:
        class: App\Admin\PeriodItemAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\PeriodItem, manager_type: orm, label: 'Objet période' }

    admin.offer:
        class: App\Admin\OfferAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Offer, manager_type: orm, label: 'Annonces' }

    admin.candidature:
        class: App\Admin\CandidatureAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Candidature, manager_type: orm, label: 'Candidatures' }

    admin.show:
        class: App\Admin\ShowAdmin
        calls:
            - [setTemplate, ['show', 'sonata/detail_show_template.html.twig']]
        tags:
            - { name: sonata.admin, model_class: App\Entity\Show, manager_type: orm, label: 'Les spectacles' }


    admin.service:
        class: App\Admin\ServiceAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Service, manager_type: orm, label: 'Les prestations' }

    admin.proContact:
        class: App\Admin\ProContactAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\ProContact, manager_type: orm, label: 'Les contacts pro' }

    admin.page:
        class: App\Admin\PageAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Page, manager_type: orm, label: 'Les pages' }

    admin.contentItem:
        class: App\Admin\ContentItemAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\ContentItem, manager_type: orm, label: 'Les objets contenu' }

    admin.content:
        class: App\Admin\ContentAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Content, manager_type: orm, label: 'Les contenus' }


    admin.role:
        class: App\Admin\RoleAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Role, manager_type: orm, label: 'Les rôles' }

    admin.roleItem:
        class: App\Admin\RoleItemAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\RoleItem, manager_type: orm, label: 'Les objets rôles' }

    admin.mediaItem:
        class: App\Admin\MediaItemAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\MediaItem, manager_type: orm, label: 'Les média' }

    admin.projectItem:
        class: App\Admin\ProjectItemAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\ProjectItem, manager_type: orm, label: 'Les objets projet' }

    admin.project:
        class: App\Admin\ProjectAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Project, manager_type: orm, label: 'Les projets' }

    admin.user:
        class: App\Admin\UserAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\User, manager_type: orm, label: 'Les utilisateurs' }

    admin.contract:
        class: App\Admin\ContractAdmin
        calls:
            - [ setTemplate, [ 'show', 'sonata/detail_contract_template.html.twig' ] ]
        tags:
            - { name: sonata.admin, model_class: App\Entity\Contract, manager_type: orm, label: 'Les contrats' }

    admin.workflow:
        class: App\Admin\WorkflowAdmin
        calls:
            - [ setTemplate, [ 'list', 'sonata/list_workflow_template.html.twig' ] ]
            - [ setTemplate, [ 'show', 'sonata/detail_workflow_template.html.twig' ] ]

        tags:
            - { name: sonata.admin, model_class: App\Entity\Workflow, manager_type: orm, label: 'Les workflows' }

    gedmo.listener.sluggable:
        class: Gedmo\Sluggable\SluggableListener
        tags:
            - { name: doctrine.event_listener, event: 'onFlush' }
            - { name: doctrine.event_listener, event: 'loadClassMetadata' }
            - { name: doctrine.event_listener, event: 'prePersist' }
        calls:
        # Uncomment the below call if using attributes, and comment the call for the annotation reader
#            - [ setAnnotationReader, [ '@gedmo.mapping.driver.attribute' ] ]

    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_listener, event: 'prePersist' }
            - { name: doctrine.event_listener, event: 'onFlush' }
            - { name: doctrine.event_listener, event: 'loadClassMetadata' }
        calls:
            # Uncomment the below call if using attributes, and comment the call for the annotation reader
#            - [ setAnnotationReader, [ '@gedmo.mapping.driver.attribute' ] ]
            # The `clock` service was intrroduced in Symfony 6.2; if using an older Symfony version, you can either comment this call or provide your own PSR-20 Clock implementation
            - [ setClock, [ '@clock' ] ]


    Sonata\MediaBundle\Model\MediaManagerInterface: '@sonata.media.manager.media'